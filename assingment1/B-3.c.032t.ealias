
;; Function printf (printf, funcdef_no=15, decl_uid=937, cgraph_uid=16, symbol_order=15)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fmt = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_4 = NONLOCAL
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fmt = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__printf_chk = { }
_4 = { ESCAPED NONLOCAL }


Alias information for printf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.2527 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__fmt_2(D), points-to NULL, points-to vars: { D.2527 } (nonlocal, escaped, restrict)

__attribute__((artificial, gnu_inline, always_inline))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> :
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function main (main, funcdef_no=23, decl_uid=2510, cgraph_uid=24, symbol_order=23)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
b_10 = b_3 + UNKNOWN
b_10 = &NONLOCAL
b_9 = b_3 + UNKNOWN
b_9 = &NONLOCAL
b_2 = b_10
b_2 = b_9
a_11 = a_1 + UNKNOWN
a_11 = &NONLOCAL
a_1 = &NONLOCAL
a_1 = a_11
b_3 = b_2
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = a_1
ESCAPED = b_3
_12 = NONLOCAL
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _12
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__printf_chk = { }
b_10 = { NONLOCAL }
b_3 = { NONLOCAL }
b_9 = { NONLOCAL }
b_2 = { NONLOCAL } same as b_3
a_11 = { NONLOCAL }
a_1 = { NONLOCAL } same as a_11
_12 = { ESCAPED NONLOCAL }


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


main ()
{
  int D.2530;
  int b;
  int a;
  int _12;

  <bb 2> :
  goto <bb 7>; [INV]

  <bb 3> :
  if (a_1 <= 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  b_10 = b_3 + 2;
  goto <bb 6>; [INV]

  <bb 5> :
  b_9 = b_3 * 2;

  <bb 6> :
  # b_2 = PHI <b_10(4), b_9(5)>
  a_11 = a_1 + 1;

  <bb 7> :
  # a_1 = PHI <4(2), a_11(6)>
  # b_3 = PHI <b_5(D)(2), b_2(6)>
  if (a_1 <= 99)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _12 = __printf_chk (1, "%d%d", a_1, b_3);
  return 0;

}


